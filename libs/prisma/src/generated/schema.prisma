generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
  theme    = "forest"
}

generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    output = "../src/generated"
    reExport = All
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String              @id @default(cuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  email         String              @unique
  password      String
  firstname     String?
  lastname      String?
  username      String
  active        Boolean
  chatId        String?             @unique
  role          Role
  chat          Chat?               @relation(fields: [chatId], references: [id])
  comments      Message[]
  ownedProjects Project[]
  projects      ProjectsOnUsers[]
  createdTasks  Task[]              @relation("UserCreatedTasks")
  assignedTasks UserAssignedTasks[]
  workspaces    Workspace?
  User_B        User[]              @relation("UserFollows")
  User_A        User[]              @relation("UserFollows")
}

model Task {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  projectId String?
  creatorId String?
  parentId  String?
  status    String              @default("TODO")
  details   String
  chatId    String?             @unique
  chat      Chat?               @relation(fields: [chatId], references: [id])
  creator   User?               @relation("UserCreatedTasks", fields: [creatorId], references: [id])
  parent    Task?               @relation("SubTasks", fields: [parentId], references: [id])
  project   Project?            @relation(fields: [projectId], references: [id])
  subTasks  Task[]              @relation("SubTasks")
  assignes  UserAssignedTasks[]
}

model Space {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  viewId     String        @unique
  projectId  String
  settingsId String        @unique
  spaceType  String
  parentId   String?
  chatId     String?       @unique
  chat       Chat?         @relation(fields: [chatId], references: [id])
  parent     Space?        @relation("SubSpaces", fields: [parentId], references: [id])
  project    Project       @relation(fields: [projectId], references: [id])
  settings   SpaceSettings @relation(fields: [settingsId], references: [id])
  view       SpaceView     @relation(fields: [viewId], references: [id])
  subspaces  Space[]       @relation("SubSpaces")
}

model SpaceView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  localId   String
  spaceId   String
  space     Space?
}

model SpaceSettings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  localId   String
  spaceId   String
  space     Space?
}

model Project {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  title       String
  description String?
  settingsId  String            @unique
  workspaceId String
  ownerId     String
  chatId      String?           @unique
  chat        Chat?             @relation(fields: [chatId], references: [id])
  owner       User              @relation(fields: [ownerId], references: [id])
  settings    ProjectSettings   @relation(fields: [settingsId], references: [id])
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  users       ProjectsOnUsers[]
  spaces      Space[]
  tasks       Task[]
}

model ProjectSettings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  localId   String
  projectId String
  project   Project?
}

model Workspace {
  id         String            @id @default(cuid())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  title      String
  settingsId String            @unique
  userId     String            @unique
  settings   WorkspaceSettings @relation(fields: [settingsId], references: [id])
  user       User              @relation(fields: [userId], references: [id])
  projects   Project[]
}

model WorkspaceSettings {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  localId     String
  workspaceId String
  workspace   Workspace?
}

model ProjectsOnUsers {
  projectId  String
  userId     String
  assignedAt DateTime @default(now())
  assignedBy String
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

model UserAssignedTasks {
  taskId     String
  userId     String
  assignedAt DateTime @default(now())
  assignedBy String
  task       Task     @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([taskId, userId])
}

model Message {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     String
  contentType String    @default("string")
  type        String    @default("message")
  senderId    String?
  parentId    String?
  chatId      String
  chat        Chat      @relation(fields: [chatId], references: [id])
  parent      Message?  @relation("SubMessages", fields: [parentId], references: [id])
  sender      User?     @relation(fields: [senderId], references: [id])
  subMessages Message[] @relation("SubMessages")
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  Project   Project?
  Space     Space?
  Task      Task?
  User      User?
}

enum Role {
  ADMIN
  USER
}
